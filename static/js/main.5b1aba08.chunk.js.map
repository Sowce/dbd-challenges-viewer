{"version":3,"sources":["images/archives.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","searchText","onSearch","bind","parseLevels","challenge","rewards","find","reward","id","amount","objective","replace","level","Object","keys","filter","map","category","target","flat","levels","parseLevel","toLowerCase","includes","sort","a","b","e","this","setState","value","className","src","archivesLogo","alt","type","placeholder","onChange","challenges","cardClassName","isMasterChallenge","style","width","cleanObjective","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gtiBAAAA,EAAOC,QAAU,IAA0B,sC,8OCoG5BC,G,kBA7Fb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CAAEC,WAAY,IAE3B,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBANP,E,+EASIE,GAChB,OACEA,EAAUC,QAAQC,MAAK,SAAAC,GAAM,MAAkB,kBAAdA,EAAOC,MAAwBC,OAAS,I,qCAI9DC,GACb,OAAQA,GAAa,IAAIC,QAAQ,WAAY,M,iCAGpCC,GACT,OAAOC,OAAOC,KAAKF,GAChBG,QAAO,SAAAH,GAAK,MAAc,YAAVA,KAChBI,KAAI,SAAAC,GAAQ,OACXL,EAAMK,GAAUD,KAAI,SAAAZ,GAAS,sBAAUA,EAAV,CAAqBc,OAAQD,UAE3DE,S,kCAGOC,GAAS,IAAD,OAClB,OAAOP,OAAOC,KAAKM,GAChBJ,KAAI,SAAAJ,GAAK,OACR,EAAKS,WAAWD,EAAOR,IAAQI,KAAI,SAAAZ,GAAS,sBACvCA,EADuC,CAE1CQ,gBAGHO,OACAJ,QAAO,SAAAX,GAAS,OACfA,EAAUM,UACPY,cACAC,SAAS,EAAKxB,MAAMC,WAAWsB,kBAEnCE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEb,MAAQc,EAAEd,W,+BAGvBe,GACPC,KAAKC,SAAS,CAAE7B,WAAY2B,EAAET,OAAOY,U,+BAG7B,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,UAAUC,IAAKC,IAAcC,IAAI,KAChD,yBAAKH,UAAU,YAAf,kBACA,yBAAKA,UAAU,WACf,2BAAOI,KAAK,OAAOC,YAAY,YAAYC,SAAUT,KAAK3B,YAE5D,kBAAC,IAAD,CAAU8B,UAAU,WACjBH,KAAKzB,YAAYmC,EAAWlB,QAAQJ,KAAI,SAAAZ,GACvC,IAAMmC,EAAa,wBAAoBnC,EAAUc,OAA9B,YACjB,EAAKsB,kBAAkBpC,GAAa,SAAW,IAGjD,OACE,yBAAK2B,UAAWQ,GACd,yBAAKR,UAAU,cACZ3B,EAAUC,QAAQW,KAAI,SAAAT,GAAM,OAC3B,yBAAKwB,UAAU,aACb,yBACEA,UAAU,aACVC,IAAG,YAAOzB,EAAOC,GAAd,QACH0B,IAAK3B,EAAOC,KAEbD,EAAOE,YAId,yBAAKsB,UAAU,gBACb,yBAAKU,MAAO,CAAEC,MAAO,SAArB,QACO,gCADP,YACwB,2BAAItC,EAAUQ,QAEtC,6BAAM,EAAK+B,eAAevC,EAAUM,uB,GAnFpCkC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5b1aba08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/archives.846cb884.png\";","import React from \"react\";\nimport challenges from \"./challenges.json\";\nimport FlipMove from \"react-flip-move\";\nimport archivesLogo from \"./images/archives.png\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = { searchText: \"\" };\n\n    this.onSearch = this.onSearch.bind(this);\n    this.parseLevels = this.parseLevels.bind(this);\n  }\n\n  isMasterChallenge(challenge) {\n    return (\n      challenge.rewards.find(reward => reward.id === \"riftfragments\").amount > 3\n    );\n  }\n\n  cleanObjective(objective) {\n    return (objective || \"\").replace(/<\\/?b>/gi, \"\");\n  }\n\n  parseLevel(level) {\n    return Object.keys(level)\n      .filter(level => level !== \"unlocks\")\n      .map(category =>\n        level[category].map(challenge => ({ ...challenge, target: category }))\n      )\n      .flat();\n  }\n\n  parseLevels(levels) {\n    return Object.keys(levels)\n      .map(level =>\n        this.parseLevel(levels[level]).map(challenge => ({\n          ...challenge,\n          level\n        }))\n      )\n      .flat()\n      .filter(challenge =>\n        challenge.objective\n          .toLowerCase()\n          .includes(this.state.searchText.toLowerCase())\n      )\n      .sort((a, b) => a.level - b.level);\n  }\n\n  onSearch(e) {\n    this.setState({ searchText: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"appBar\">\n          <img className=\"appLogo\" src={archivesLogo} alt=\"\" />\n          <div className=\"appTitle\">DBD Challenges</div>\n          <div className=\"spacer\"></div>\n          <input type=\"text\" placeholder=\"Search...\" onChange={this.onSearch} />\n        </div>\n        <FlipMove className=\"content\">\n          {this.parseLevels(challenges.levels).map(challenge => {\n            const cardClassName = `challengeCard ${challenge.target} ${\n              this.isMasterChallenge(challenge) ? \"master\" : \"\"\n            }`;\n\n            return (\n              <div className={cardClassName}>\n                <div className=\"rewardsCol\">\n                  {challenge.rewards.map(reward => (\n                    <div className=\"rewardRow\">\n                      <img\n                        className=\"rewardIcon\"\n                        src={`./${reward.id}.png`}\n                        alt={reward.id}\n                      />\n                      {reward.amount}\n                    </div>\n                  ))}\n                </div>\n                <div className=\"challengeCol\">\n                  <div style={{ width: \"100%\" }}>\n                    Tome <b>2</b> - Level <b>{challenge.level}</b>\n                  </div>\n                  <div>{this.cleanObjective(challenge.objective)}</div>\n                </div>\n              </div>\n            );\n          })}\n        </FlipMove>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}