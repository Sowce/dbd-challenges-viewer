{"version":3,"sources":["images/archives.png","images/you-did-it.jpg","components/HideCompletedCheckbox.js","components/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HideCompletedCheckbox","props","state","checked","onChange","fill","this","setState","containerClassName","className","onClick","bind","xmlns","version","width","height","viewBox","d","React","Component","SearchIcon","TextInput","inputRef","createRef","onContainerClick","current","focus","ref","placeholder","type","getLocalStorage","item","window","localStorage","getItem","setLocalStorage","value","setItem","JSON","stringify","App","challengeState","hideCompleted","parse","Boolean","searchText","id","event","preventDefault","stopPropagation","parseLevels","challenges","levels","map","challenge","getChallengeState","reduce","a","b","newValue","rewards","find","reward","amount","objective","replace","level","Object","keys","filter","category","target","flat","parseLevel","result","toLowerCase","includes","sort","e","src","archivesLogo","alt","onHideCompleted","onSearch","isFullyCompleted","youDidIt","displayLevels","cardClassName","isMasterChallenge","onChallengeClick","key","style","cleanObjective","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0126a03f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/archives.846cb884.png\";","module.exports = __webpack_public_path__ + \"static/media/you-did-it.49121c1c.jpg\";","import React from \"react\";\r\n\r\nimport \"./HideCompletedCheckbox.css\";\r\n\r\nclass HideCompletedCheckbox extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      checked: props.checked,\r\n      onChange: props.onChange,\r\n      fill: props.fill\r\n    };\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({ checked: !this.state.checked }, () =>\r\n      this.state.onChange(this.state.checked)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const containerClassName = `checkBoxContainer${\r\n      this.state.checked ? \" checked\" : \"\"\r\n    }`;\r\n\r\n    return (\r\n      <div className={containerClassName} onClick={this.onClick.bind(this)}>\r\n        <div className=\"tooltip\">\r\n        <div className=\"arrow-up\"></div>\r\n          <div>Hide Completed Challenges</div>\r\n        </div>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          version=\"1.1\"\r\n          width=\"24\"\r\n          height=\"24\"\r\n          viewBox=\"0 0 24 24\"\r\n          fill={this.state.fill}\r\n        >\r\n          <path d=\"M2,5.27L3.28,4L20,20.72L18.73,22L15.65,18.92C14.5,19.3 13.28,19.5 12,19.5C7,19.5 2.73,16.39 1,12C1.69,10.24 2.79,8.69 4.19,7.46L2,5.27M12,9A3,3 0 0,1 15,12C15,12.35 14.94,12.69 14.83,13L11,9.17C11.31,9.06 11.65,9 12,9M12,4.5C17,4.5 21.27,7.61 23,12C22.18,14.08 20.79,15.88 19,17.19L17.58,15.76C18.94,14.82 20.06,13.54 20.82,12C19.17,8.64 15.76,6.5 12,6.5C10.91,6.5 9.84,6.68 8.84,7L7.3,5.47C8.74,4.85 10.33,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C12.69,17.5 13.37,17.43 14,17.29L11.72,15C10.29,14.85 9.15,13.71 9,12.28L5.6,8.87C4.61,9.72 3.78,10.78 3.18,12Z\" />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HideCompletedCheckbox;\r\n","import React from \"react\";\r\n\r\nimport \"./SearchBox.css\";\r\n\r\nconst SearchIcon = props => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    version=\"1.1\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill={props.fill}\r\n  >\r\n    <path d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\r\n  </svg>\r\n);\r\n\r\nclass TextInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.inputRef = React.createRef();\r\n    this.onContainerClick = this.onContainerClick.bind(this);\r\n  }\r\n\r\n  onContainerClick() {\r\n    this.inputRef.current.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"searchContainer\" onClick={this.onContainerClick}>\r\n        <SearchIcon fill=\"#fff\"></SearchIcon>\r\n        <input\r\n          ref={this.inputRef}\r\n          onChange={this.props.onChange}\r\n          placeholder=\"Search...\"\r\n          type=\"text\"\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\nimport challenges from \"./challenges.json\";\nimport FlipMove from \"react-flip-move\";\nimport archivesLogo from \"./images/archives.png\";\nimport youDidIt from \"./images/you-did-it.jpg\";\nimport \"./App.css\";\n\nimport HideCompletedCheckbox from \"./components/HideCompletedCheckbox.js\";\nimport SearchBox from \"./components/SearchBox.js\";\n\nconst getLocalStorage = item => window.localStorage.getItem(item);\nconst setLocalStorage = (item, value) =>\n  window.localStorage.setItem(\n    item,\n    typeof value === \"object\" ? JSON.stringify(value) : value\n  );\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    let challengeState = {};\n    let hideCompleted = false;\n\n    if (getLocalStorage(\"challengeState\"))\n      challengeState = JSON.parse(getLocalStorage(\"challengeState\"));\n    if (getLocalStorage(\"hideCompleted\"))\n      hideCompleted = Boolean(getLocalStorage(\"hideCompleted\"));\n\n    this.state = { searchText: \"\", challengeState, hideCompleted };\n  }\n\n  onChallengeClick(id, event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.setState(\n      {\n        challengeState: {\n          ...this.state.challengeState,\n          [id]: !this.state.challengeState[id]\n        }\n      },\n      () => {\n        setLocalStorage(\"challengeState\", this.state.challengeState);\n      }\n    );\n  }\n\n  isFullyCompleted() {\n    return (\n      this.state.hideCompleted &&\n      this.parseLevels(challenges.levels)\n        .map(challenge => this.getChallengeState(challenge.id))\n        .reduce((a, b) => a && b)\n    );\n  }\n\n  onHideCompleted(newValue) {\n    this.setState(\n      { hideCompleted: newValue },\n      setLocalStorage(\"hideCompleted\", newValue)\n    );\n  }\n\n  getChallengeState(id) {\n    return Boolean(this.state.challengeState[id]);\n  }\n\n  isMasterChallenge(challenge) {\n    return (\n      challenge.rewards.find(reward => reward.id === \"riftfragments\").amount > 3\n    );\n  }\n\n  cleanObjective(objective) {\n    return (objective || \"\").replace(/<\\/?b>/gi, \"\");\n  }\n\n  parseLevel(level) {\n    return Object.keys(level)\n      .filter(level => level !== \"unlocks\")\n      .map(category =>\n        level[category].map(challenge => ({ ...challenge, target: category }))\n      )\n      .flat();\n  }\n\n  parseLevels(levels) {\n    return Object.keys(levels)\n      .map(level =>\n        this.parseLevel(levels[level]).map(challenge => ({\n          ...challenge,\n          level\n        }))\n      )\n      .flat();\n  }\n\n  displayLevels(levels) {\n    let result = this.parseLevels(levels)\n      .filter(challenge =>\n        challenge.objective\n          .toLowerCase()\n          .includes(this.state.searchText.toLowerCase())\n      )\n      .sort((a, b) => a.level - b.level);\n\n    if (this.state.hideCompleted)\n      result = result.filter(\n        challenge => !this.getChallengeState(challenge.id)\n      );\n\n    return result;\n  }\n\n  onSearch(e) {\n    this.setState({ searchText: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"appBar\">\n          <img className=\"appLogo\" src={archivesLogo} alt=\"\" />\n          <div className=\"appTitle\">DBD Challenges</div>\n          <div className=\"spacer\"></div>\n          <HideCompletedCheckbox\n            fill=\"#fff\"\n            checked={this.state.hideCompleted}\n            onChange={this.onHideCompleted.bind(this)}\n          />\n          <SearchBox\n            onChange={this.onSearch.bind(this)}\n          />\n        </div>\n        {this.isFullyCompleted() && (\n          <div className=\"completed\">\n            <img src={youDidIt} alt=\"\" />\n          </div>\n        )}\n        {!this.isFullyCompleted() && (\n          <FlipMove className=\"content\">\n            {this.displayLevels(challenges.levels).map(challenge => {\n              const cardClassName = `challengeCard ${challenge.target}${\n                this.isMasterChallenge(challenge) ? \" master\" : \"\"\n              }${this.getChallengeState(challenge.id) ? \" done\" : \"\"}`;\n\n              return (\n                <div\n                  className={cardClassName}\n                  onClick={e => this.onChallengeClick(challenge.id, e)}\n                  key={challenge.id}\n                >\n                  <div className=\"rewardsCol\">\n                    {challenge.rewards.map(reward => (\n                      <div\n                        className=\"rewardRow\"\n                        key={`${reward.id}-${reward.amount}`}\n                      >\n                        <img\n                          className=\"rewardIcon\"\n                          src={`./${reward.id}.png`}\n                          alt={reward.id}\n                        />\n                        {reward.amount}\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"challengeCol\">\n                    <div style={{ width: \"100%\" }}>\n                      Tome <b>2</b> - Level <b>{challenge.level}</b>\n                    </div>\n                    <div>{this.cleanObjective(challenge.objective)}</div>\n                  </div>\n                </div>\n              );\n            })}\n          </FlipMove>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}