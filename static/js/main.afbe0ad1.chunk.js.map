{"version":3,"sources":["images/archives.png","images/you-did-it.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","getLocalStorage","item","window","localStorage","getItem","setLocalStorage","value","setItem","JSON","stringify","App","challengeState","hideCompleted","parse","Boolean","state","searchText","id","this","setState","parseLevels","challenges","levels","map","challenge","getChallengeState","reduce","a","b","event","target","checked","rewards","find","reward","amount","objective","replace","level","Object","keys","filter","category","flat","parseLevel","result","toLowerCase","includes","sort","e","className","src","archivesLogo","alt","type","name","onChange","onHideCompleted","bind","htmlFor","placeholder","onSearch","isFullyCompleted","youDidIt","displayLevels","cardClassName","isMasterChallenge","onClick","onChallengeClick","key","style","width","cleanObjective","React","Component","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afbe0ad1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/archives.846cb884.png\";","module.exports = __webpack_public_path__ + \"static/media/you-did-it.49121c1c.jpg\";","import React from \"react\";\nimport challenges from \"./challenges.json\";\nimport FlipMove from \"react-flip-move\";\nimport archivesLogo from \"./images/archives.png\";\nimport youDidIt from \"./images/you-did-it.jpg\";\nimport \"./App.css\";\n\nconst getLocalStorage = item => window.localStorage.getItem(item);\nconst setLocalStorage = (item, value) =>\n  window.localStorage.setItem(\n    item,\n    typeof value === \"object\" ? JSON.stringify(value) : value\n  );\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    let challengeState = {};\n    let hideCompleted = false;\n\n    if (getLocalStorage(\"challengeState\"))\n      challengeState = JSON.parse(getLocalStorage(\"challengeState\"));\n    if (getLocalStorage(\"hideCompleted\"))\n      hideCompleted = Boolean(getLocalStorage(\"hideCompleted\"));\n\n    this.state = { searchText: \"\", challengeState, hideCompleted };\n  }\n\n  onChallengeClick(id) {\n    this.setState(\n      {\n        challengeState: {\n          ...this.state.challengeState,\n          [id]: !this.state.challengeState[id]\n        }\n      },\n      () => {\n        setLocalStorage(\"challengeState\", this.state.challengeState);\n      }\n    );\n  }\n\n  isFullyCompleted() {\n    return (\n      this.state.hideCompleted &&\n      this.parseLevels(challenges.levels)\n        .map(challenge => this.getChallengeState(challenge.id))\n        .reduce((a, b) => a && b)\n    );\n  }\n\n  onHideCompleted(event) {\n    this.setState(\n      { hideCompleted: event.target.checked },\n      setLocalStorage(\"hideCompleted\", event.target.checked)\n    );\n  }\n\n  getChallengeState(id) {\n    return Boolean(this.state.challengeState[id]);\n  }\n\n  isMasterChallenge(challenge) {\n    return (\n      challenge.rewards.find(reward => reward.id === \"riftfragments\").amount > 3\n    );\n  }\n\n  cleanObjective(objective) {\n    return (objective || \"\").replace(/<\\/?b>/gi, \"\");\n  }\n\n  parseLevel(level) {\n    return Object.keys(level)\n      .filter(level => level !== \"unlocks\")\n      .map(category =>\n        level[category].map(challenge => ({ ...challenge, target: category }))\n      )\n      .flat();\n  }\n\n  parseLevels(levels) {\n    return Object.keys(levels)\n      .map(level =>\n        this.parseLevel(levels[level]).map(challenge => ({\n          ...challenge,\n          level\n        }))\n      )\n      .flat();\n  }\n\n  displayLevels(levels) {\n    let result = this.parseLevels(levels)\n      .filter(challenge =>\n        challenge.objective\n          .toLowerCase()\n          .includes(this.state.searchText.toLowerCase())\n      )\n      .sort((a, b) => a.level - b.level);\n\n    if (this.state.hideCompleted)\n      result = result.filter(\n        challenge => !this.getChallengeState(challenge.id)\n      );\n\n    return result;\n  }\n\n  onSearch(e) {\n    this.setState({ searchText: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"appBar\">\n          <img className=\"appLogo\" src={archivesLogo} alt=\"\" />\n          <div className=\"appTitle\">DBD Challenges</div>\n          <div className=\"spacer\"></div>\n          <div className=\"checkBoxContainer\">\n            <input\n              type=\"checkbox\"\n              name=\"hideCompleted\"\n              checked={this.state.hideCompleted}\n              onChange={this.onHideCompleted.bind(this)}\n              id=\"hideCompleted\"\n            />\n            <label htmlFor=\"hideCompleted\">Hide Completed</label>\n          </div>\n          <input\n            type=\"text\"\n            placeholder=\"Search...\"\n            onChange={this.onSearch.bind(this)}\n          />\n        </div>\n        {this.isFullyCompleted() && (\n          <div className=\"completed\">\n            <img src={youDidIt} alt=\"\" />\n          </div>\n        )}\n        {!this.isFullyCompleted() && (\n          <FlipMove className=\"content\">\n            {this.displayLevels(challenges.levels).map(challenge => {\n              const cardClassName = `challengeCard ${challenge.target}${\n                this.isMasterChallenge(challenge) ? \" master\" : \"\"\n              }${this.getChallengeState(challenge.id) ? \" done\" : \"\"}`;\n\n              return (\n                <div\n                  className={cardClassName}\n                  onClick={() => this.onChallengeClick(challenge.id)}\n                  key={challenge.id}\n                >\n                  <div className=\"rewardsCol\">\n                    {challenge.rewards.map(reward => (\n                      <div\n                        className=\"rewardRow\"\n                        key={`${reward.id}-${reward.amount}`}\n                      >\n                        <img\n                          className=\"rewardIcon\"\n                          src={`./${reward.id}.png`}\n                          alt={reward.id}\n                        />\n                        {reward.amount}\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"challengeCol\">\n                    <div style={{ width: \"100%\" }}>\n                      Tome <b>2</b> - Level <b>{challenge.level}</b>\n                    </div>\n                    <div>{this.cleanObjective(challenge.objective)}</div>\n                  </div>\n                </div>\n              );\n            })}\n          </FlipMove>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}